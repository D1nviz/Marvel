{"version":3,"file":"static/js/405.5c031377.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/charInfo/CharInfo.jsx","components/errorBoundary/ErrorBoundaty.jsx","components/charSearch/CharSearch.jsx","components/pages/MainPage.jsx","services/MarvelService.jsx","hooks/http.hook.jsx","components/skeleton/Skeleton.jsx","utils/setContent.jsx"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt=\"Error\" />\r\n   )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n\n\tconst [char, setChar] = useState({});\n\tconst { getCharacter, clearError, proc, setProcess } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\tconst timerId = setInterval(updateChar, 60000);\n\n\t\treturn () => {\n\t\t\tclearInterval(timerId)\n\t\t}\n\t}, [])\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded)\n\t\t\t.then(() => setProcess(\"confirmed\"));\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{setContent(proc, View, char)}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!\n\t\t\t\t\t<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">Or choose another one</p>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img\n\t\t\t\t\tsrc={mjolnir}\n\t\t\t\t\talt=\"mjolnir\"\n\t\t\t\t\tclassName=\"randomchar__decoration\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst View = ({ data }) => {\n\tconst { name, description, thumbnail, homepage, wiki } = data;\n\tlet imgStyle = { 'objectFit': 'cover' };\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { 'objectFit': 'contain' };\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">\n\t\t\t\t\t{description}\n\t\t\t\t</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\nconst setContent = (proc, Component, newItemLoading) => {\n\tswitch (proc) {\n      case \"waiting\":\n         return <Spinner />\n      case \"loading\":\n         return newItemLoading ?  <Component/> :  <Spinner />\n      case \"confirmed\":\n         return <Component />\n      case \"error\":\n         return <ErrorMessage />\n      default:\n         throw new Error(\"Unexpected process state\");\n   }\n}\n\nconst CharList = (props) => {\n\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setnewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(304);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\tconst { getAllCharacters, proc, setProcess } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setnewItemLoading(false) : setnewItemLoading(true);\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t\t\t.then(() => setProcess(\"confirmed\"));\n\t}\n\n\tconst onCharListLoaded = async (newCharList) => {\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\t\tsetCharList([...charList, ...newCharList]);\n\t\tsetnewItemLoading(false);\n\t\tsetOffset(offset + 9);\n\t\tsetCharEnded(ended);\n\t}\n\n\tconst itemRefs = useRef([]);\n\n\tconst focusOnItem = (id) => {\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t\titemRefs.current[id].focus();\n\t}\n\n\tfunction renderItems(arr) {\n\t\tconst items = arr.map((item, i) => {\n\t\t\tlet imgStyle = { 'objectFit': 'cover' };\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\timgStyle = { 'objectFit': 'unset' };\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\tref={el => itemRefs.current[i] = el}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\tif (e.key === ' ' || e.key === \"Enter\") {\n\t\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle} />\n\t\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t\t</li>\n\t\t\t\t</CSSTransition>\n\t\t\t)\n\t\t});\n\n\t\treturn (\n\t\t\t<ul className=\"char__grid\">\n\t\t\t\t<TransitionGroup component={null}>\n\t\t\t\t\t{items}\n\t\t\t\t</TransitionGroup>\n\t\t\t</ul>\n\t\t)\n\t}\n\n\tconst elements = useMemo(() => {\n\t\treturn setContent(proc, () => renderItems(charList), newItemLoading)\n\t}, [proc]);\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{elements}\n\t\t\t<button\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{ 'display': charEnded ? 'none' : 'block' }}\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tonClick={() => onRequest(offset)}>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n\tconst [char, setChar] = useState(null);\n\n\tconst {getCharacter,proc, setProcess} = useMarvelService();\n\n\tuseEffect(() => updateChar(), [props.charId]);\n\n\tconst updateChar = () => {\n\t\tconst { charId } = props;\n\t\tif (!charId) return;\n\t\t\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded)\n\t\t\t.then(() => setProcess(\"confirmed\"));\n\t}\n\n\tconst onCharLoaded = char => setChar(char);\n\n\treturn (\n\t\t<div className=\"char__info\">\n\t\t\t{setContent(proc, View, char)}\n\t\t</div>\n\t)\n}\n\nconst View = ({ data }) => {\n\n\tconst { name, description, thumbnail, homepage, wiki, comics } = data;\n\tlet slicedComics = comics.length > 9 ? comics.slice(0, 10) : comics;\n\treturn (\n\t\t<>\n\t\t\t<div className=\"char__basics\">\n\t\t\t\t<img src={thumbnail}\n\t\t\t\t\talt={name}\n\t\t\t\t\tstyle={{ objectFit: thumbnail.includes(\"image_not_available\") ? \"contain\" : \"cover\" }} />\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"char__descr\">\n\t\t\t\t{description}\n\t\t\t</div>\n\t\t\t<div className=\"char__comics\">Comics:</div>\n\t\t\t<ul className=\"char__comics-list\">\n\t\t\t\t{comics.length === 0 ? \"There is no comics with this character\" : null}\n\t\t\t\t{\n\t\t\t\t\tslicedComics.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n   state = {\r\n      error: false\r\n   }\r\n\r\n   componentDidCatch(error, errorInfo) {\r\n      console.log(error, errorInfo);\r\n      this.setState({\r\n         error: true\r\n      })\r\n   } \r\n\r\n   render() {\r\n      if(this.state.error) {\r\n         return <h2>Something went wrong</h2>\r\n      } else {\r\n         return this.props.children;\r\n      }\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./charSearch.scss\"\r\n\r\nconst CharSearch = () => {\r\n   const [char, setChar] = useState(null);\r\n\r\n   const { proc, setProcess, getCharacterByName, clearError } = useMarvelService();\r\n\r\n   const onCharLoaded = (char) => setChar(char);\r\n\r\n   const updateChar = (name) => {\r\n      clearError();\r\n      getCharacterByName(name)\r\n         .then(onCharLoaded)\r\n         .then(() => setProcess(\"confirmed\"))\r\n   };\r\n\r\n   const errorMessage = proc === \"error\" ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n   const results = !char ? null : char.length > 0 ?\r\n      <div className=\"char__search-wrapper\">\r\n         <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n         <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n            <div className=\"inner\">To page</div>\r\n         </Link>\r\n      </div> :\r\n      <div className=\"char__search-error\">\r\n         The character was not found. Check the name and try again\r\n      </div>;\r\n\r\n   return (\r\n      <div className=\"char__search-form\">\r\n         <Formik\r\n            initialValues={{\r\n               charName: \"\"\r\n            }}\r\n            validationSchema={Yup.object({\r\n               charName: Yup.string().required(\"This field is required\")\r\n            })}\r\n            onSubmit={({ charName }) => {\r\n               updateChar(charName);\r\n            }}\r\n         >\r\n            <Form>\r\n               <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n               <div className=\"char__search-wrapper\">\r\n                  <Field\r\n                     id=\"charName\"\r\n                     name='charName'\r\n                     type='text'\r\n                     placeholder=\"Enter name\" />\r\n                  <button\r\n                     type='submit'\r\n                     className=\"button button__main\"\r\n                     disabled={proc === \"loading\"} >\r\n                     <div className=\"inner\">find</div>\r\n                  </button>\r\n               </div>\r\n               <ErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n            </Form>\r\n         </Formik>\r\n         {results}\r\n         {errorMessage}\r\n      </div>\r\n   )\r\n};\r\n\r\nexport default CharSearch;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\"\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundaty\";\r\nimport CharSearch from \"../charSearch/CharSearch\";\r\n\r\nimport decoration from '../../resources/img/spiderman.png';\r\n\r\nconst MainPage = () => {\r\n   const [selectedChar, setChar] = useState(null);\r\n\r\n   const onCharSelected = (id) => setChar(id);\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <meta name=\"description\" content=\"Marvel information portal\" />\r\n            <title>Marvel information</title>\r\n         </Helmet>\r\n         <ErrorBoundary> <RandomChar /></ErrorBoundary>\r\n         <div className=\"char__content\">\r\n            <CharList onCharSelected={onCharSelected} />\r\n            <div>\r\n               <ErrorBoundary>\r\n                  <CharInfo charId={selectedChar} />\r\n               </ErrorBoundary>\r\n\r\n               <ErrorBoundary>\r\n                  <CharSearch />\r\n               </ErrorBoundary></div>\r\n\r\n         </div>\r\n         <div className=\"box-decoration\">\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n         </div>\r\n\r\n\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {  request, clearError, proc, setProcess } = useHttp();\r\n\r\n\tconst _apiBase = process.env.REACT_APP_API_BASE;\r\n\tconst _apiKey = `apikey=${process.env.REACT_APP_API_KEY}`;\r\n\tconst _baseOffset = 210;\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t};\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t\turl: comics.urls[0].url\r\n\t\t}\r\n\t};\r\n\r\n\treturn {\r\n\t\tproc,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tclearError,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t\tgetCharacterByName\r\n\t}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n   const [proc, setProcess] = useState(\"waiting\"); \r\n\r\n   const request = useCallback(async (url, method = \"GET\", body = null, headers = {\"Content-Type\": \"aplication/json\"}) => {\r\n      setProcess(\"loading\");\r\n      try {\r\n         const response = await fetch(url, {method, body, headers});\r\n\r\n         if (!response.ok) throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        \r\n         const data = await response.json();\r\n\r\n         return data;\r\n\r\n      } catch  (e) {\r\n         setProcess(\"error\")\r\n         throw e;\r\n      }\r\n   }, []);\r\n\r\n   const clearError = useCallback(() => {\r\n      setProcess(\"loading\");\r\n   }, []);\r\n\r\n   return { request,clearError, proc, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n\treturn (\n\t\t<>\n\t\t\t<p className=\"char__select\">Please select a character to see information</p>\n\t\t\t<div className=\"skeleton\">\n\t\t\t\t<div className=\"pulse skeleton__header\">\n\t\t\t\t\t<div className=\"pulse skeleton__circle\"></div>\n\t\t\t\t\t<div className=\"pulse skeleton__mini\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pulse skeleton__block\"></div>\n\t\t\t\t<div className=\"pulse skeleton__block\"></div>\n\t\t\t\t<div className=\"pulse skeleton__block\"></div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (proc, Component, data) => {\r\n   switch (proc) {\r\n      case \"waiting\":\r\n         return <Skeleton />\r\n      case \"loading\":\r\n         return <Spinner />\r\n      case \"confirmed\":\r\n         return <Component data={data} />\r\n      case \"error\":\r\n         return <ErrorMessage />\r\n      default:\r\n         throw new Error(\"Unexpected process state\");\r\n   }\r\n};\r\n\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","proc","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","length","concat","_toConsumableArray","stop","_x","apply","arguments","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","slicedComics","slice","_Fragment","includes","charId","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearch","decoration","_useHttp","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","status","json","abrupt","t0","useHttp","_apiBase","process","_apiKey","res","_transformCharacter","_ref2","_callee2","_args2","_context2","_ref3","_callee3","_context3","_x2","getComic","_ref4","_callee4","_context4","_transformComics","_x3","getAllComics","_ref5","_callee5","_args5","_context5","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}